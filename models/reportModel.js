// Generated by CoffeeScript 1.6.1
(function() {
  var Response, getDateNumber, redis;

  redis = require("redis");

  Response = require('../vo/response').Response;

  exports.createReport = function(userId, content, dateStr, callback) {
    var client;
    client = redis.createClient();
    userId = "28";
    return client.incr("next_report_id", function(err, reportId) {
      var score;
      score = getDateNumber(dateStr);
      return client.zadd("userid:" + userId + ":reportIds", score, reportId, function(err, reply) {
        return client.hmset("userid:" + userId + ":reports", "" + reportId + ":date", dateStr, "" + reportId + ":content", content, function(err, reply) {
          return callback(new Response(1, 'success', reply));
        });
      });
    });
  };

  getDateNumber = function(dateStr) {
    var date, months, year, _ref;
    _ref = dateStr.split("-"), year = _ref[0], months = _ref[1], date = _ref[2];
    if (months.length === 1) {
      months = "0" + months;
    }
    if (date.length === 1) {
      date = "0" + date;
    }
    return parseInt("" + year + months + date);
  };

  exports.getReports = function(userId, page, numOfPage, callback) {
    var client, end, start;
    client = redis.createClient();
    start = numOfPage * (page - 1);
    if (start < 0) {
      start = 0;
    }
    end = (numOfPage * page) - 1;
    return client.zrevrange("userid:" + userId + ":reportIds", start, end, function(err, reportIds) {
      var contentArgs, dateArgs, reportId, _i, _len;
      dateArgs = ["userid:" + userId + ":reports"];
      contentArgs = ["userid:" + userId + ":reports"];
      for (_i = 0, _len = reportIds.length; _i < _len; _i++) {
        reportId = reportIds[_i];
        dateArgs.push("" + reportId + ":date");
        contentArgs.push("" + reportId + ":content");
      }
      return client.hmget(dateArgs, function(err, dates) {
        return client.hmget(contentArgs, function(err, contents) {
          var i, len, response, _j;
          len = contents.length;
          response = [];
          for (i = _j = 0; 0 <= len ? _j < len : _j > len; i = 0 <= len ? ++_j : --_j) {
            response.push({
              id: reportIds[i],
              date: dates[i],
              content: contents[i]
            });
          }
          client.quit();
          return callback(new Response(1, 'success', response));
        });
      });
    });
  };

  exports.getReportNum = function(userId, callback) {
    var client;
    client = redis.createClient();
    return client.zcount("userid:" + userId + ":reportIds", "-inf", "+inf", function(err, count) {
      client.quit();
      return callback(new Response(1, 'success', count));
    });
  };

  exports.deleteReport = function(userId, reportId, callback) {
    var client;
    client = redis.createClient();
    return client.zrem("userid:" + userId + ":reportIds", reportId, function(err, reply) {
      return client.hdel("userid:" + userId + ":reports", "" + reportId + ":date", "" + reportId + ":content", function(err, reply) {}, client.quit(), callback(new Response(1, 'success', reply)));
    });
  };

}).call(this);
