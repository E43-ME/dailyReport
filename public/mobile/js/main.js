// Generated by CoffeeScript 1.6.1
(function() {
  var NUMOFPAGE, currentPage, deleteReport, getDateStr, getReportNum, getReports, init, initPageInfo, isValidDate, isValidLoginUser, loginPageShowed, pageNum, reportTotalNum, reportUserId, reports, setPageState, showPageShowed, validator, writePageShowed;

  loginPageShowed = false;

  writePageShowed = false;

  showPageShowed = false;

  init = function() {
    if (window.mobileInitFinished) {
      return;
    }
    window.mobileInitFinished = true;
    console.log("mobile init.");
    $("body").on("pageshow", "#loginPage", function(e) {
      if (loginPageShowed) {
        return;
      }
      loginPageShowed = true;
      return $("#loginSubmitBtn").on("click", function() {
        var data;
        if (isValidLoginUser()) {
          data = {
            userName: $.trim($("#userName").val()),
            password: $.trim($("#password").val())
          };
          return Model.login(data, function(response) {
            if (response.state === 0) {
              return;
            }
            if (response.data === 0) {
              $.mobile.changePage("#loginErrorPage", {
                role: "dialog"
              });
            }
            if (response.data === 1) {
              return $.mobile.changePage("write");
            }
          });
        } else {
          return $.mobile.changePage("#loginErrorPage", {
            role: "dialog"
          });
        }
      });
    });
    $("body").on("pageshow", "#writePage", function(e) {
      if (writePageShowed) {
        return;
      }
      writePageShowed = true;
      return $("#reportSubmitBtn").on("click", function() {
        var contentStr, data, dateStr;
        if (isValidDate()) {
          dateStr = $.trim($("#dateTxt").val());
          contentStr = $.trim($("#content").val());
          data = {
            date: dateStr,
            content: contentStr
          };
          return Model.createReport(data, function(response) {
            if (response.state === 0) {
              return;
            }
            return window.location.href = "/m/show";
          });
        } else {
          return $.mobile.changePage("#writeErrorPage", {
            role: "dialog"
          });
        }
      });
    });
    return $("body").on("pageshow", "#showPage", function(e) {
      initPageInfo();
      getReports();
      getReportNum();
      if (showPageShowed) {
        return;
      }
      showPageShowed = true;
      $("#reportList").on("taphold", "li", function(e) {
        var reportId;
        reportId = $(this).attr('reportId');
        $("#deleteReportBtn").attr("reportId", reportId);
        $("#deleteReportMenu").popup();
        return $("#deleteReportMenu").popup('open');
      });
      $("#deleteReportMenu").on("click", "#deleteReportBtn", function(e) {
        var reportId;
        reportId = $(this).attr('reportId');
        deleteReport(reportId);
        return $("#deleteReportMenu").popup('close');
      });
      $("#deleteReportMenu").on("click", "#cancelDeleteReportBtn", function(e) {
        return $("#deleteReportMenu").popup('close');
      });
      $("div.pagePre").on("click", "button", function(e) {
        currentPage -= 1;
        setPageState();
        getReports();
        return console.log("pre button clicked." + currentPage);
      });
      return $("div.pageNext").on("click", "button", function(e) {
        currentPage += 1;
        setPageState();
        getReports();
        return console.log("next button clicked." + currentPage);
      });
    });
  };

  isValidLoginUser = function() {
    var pw, un;
    un = $.trim($("#userName").val());
    pw = $.trim($("#password").val());
    return un.length >= 2 && un.length <= 25 && pw.length >= 7 && pw.length <= 25;
  };

  getDateStr = function(date) {
    var month, today, year;
    today = new Date();
    year = date.getFullYear();
    month = date.getMonth() + 1;
    date = date.getDate();
    return "" + year + "-" + month + "-" + date;
  };

  validator = new Validator();

  isValidDate = function() {
    var contentStr, date, dateStr, months, year, _ref;
    dateStr = $.trim($("#dateTxt").val());
    contentStr = $.trim($("#content").val());
    try {
      validator.check(contentStr).notEmpty();
      validator.check(dateStr).notEmpty();
      _ref = dateStr.split("-"), year = _ref[0], months = _ref[1], date = _ref[2];
      validator.check(year).notNull().isNumeric().len(4, 4);
      validator.check(months).notNull().isNumeric().len(1, 2);
      validator.check(date).notNull().isNumeric().len(1, 2);
      return true;
    } catch (error) {
      return false;
    }
  };

  NUMOFPAGE = 2;

  reports = [];

  reportTotalNum = 0;

  pageNum = 0;

  currentPage = 1;

  reportUserId = null;

  initPageInfo = function() {
    reports = [];
    reportTotalNum = 0;
    pageNum = 0;
    currentPage = 1;
    return reportUserId = null;
  };

  getReports = function() {
    var data;
    data = {
      page: currentPage,
      numOfPage: NUMOFPAGE,
      userId: reportUserId
    };
    return Model.getReports(data, function(response) {
      var report, reportHTML, _i, _len, _ref, _results;
      if (response.state === 0) {
        return;
      }
      reports = [];
      $("#reportList ul").empty();
      _ref = response.data;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        report = _ref[_i];
        reports.push(report);
        reportHTML = "<li class='report' reportId='" + report.id + "'><p class='date'><i class='icon-calendar'></i><span>" + report.date + "</span></p>                  <div class='content'>" + report.content + "</div></li>";
        _results.push($("#reportList ul").append(reportHTML));
      }
      return _results;
    });
  };

  deleteReport = function(reportId) {
    return Model.deleteReport({
      reportId: reportId
    }, function(response) {
      if (response.state === 0) {
        return;
      }
      reportTotalNum -= 1;
      if (reports.length === 1 && currentPage > 1) {
        currentPage -= 1;
      }
      setPageState();
      return getReports();
    });
  };

  getReportNum = function() {
    return Model.getReportNum(reportUserId, function(response) {
      if (response.state === 1) {
        reportTotalNum = response.data;
      }
      return setPageState();
    });
  };

  setPageState = function() {
    pageNum = Math.ceil(reportTotalNum / NUMOFPAGE);
    if (pageNum === 0) {
      pageNum = 1;
    }
    $("div.pagetip").empty();
    $("div.pagetip").append("" + currentPage + "/" + pageNum);
    if (pageNum === 1) {
      return $("div.pageination").hide();
    } else if (currentPage === 1) {
      $("div.pageination").show();
      $("div.pagePre").hide();
      return $("div.pageNext").show();
    } else if (currentPage === pageNum) {
      $("div.pageination").show();
      $("div.pagePre").show();
      return $("div.pageNext").hide();
    } else {
      $("div.pageination").show();
      $("div.pagePre").show();
      return $("div.pageNext").show();
    }
  };

  window.init = init;

}).call(this);
