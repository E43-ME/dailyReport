// Generated by CoffeeScript 1.6.1
(function() {
  var UserModel, UserViewModel, init;

  UserModel = (function() {

    function UserModel() {}

    UserModel.getAllUsers = function(callback) {
      return $.post("/admin/getallusers", function(response) {
        response["data"] = UserModel.parseUsers(response.data);
        return callback(response);
      }, "json");
    };

    UserModel.createUser = function(data, callback) {
      return $.post("/admin/createUsers", data, function(response) {
        return callback(response);
      }, "json");
    };

    UserModel.parseUsers = function(data) {
      var childOfKey, key, key2, result, resultObj, userId, value, value2, _ref;
      resultObj = {};
      for (key in data) {
        value = data[key];
        childOfKey = key.split(":");
        userId = childOfKey[0];
        if ((_ref = resultObj[userId]) == null) {
          resultObj[userId] = {
            id: userId
          };
        }
        if (childOfKey[1] === "user_name") {
          resultObj[userId]["name"] = value;
        } else if (childOfKey[1] === "department_id") {
          resultObj[userId]["departmentId"] = value;
        } else if (childOfKey[1] === "superior_id") {
          resultObj[userId]["pid"] = value;
        }
      }
      result = [];
      for (key2 in resultObj) {
        value2 = resultObj[key2];
        result.push(value2);
      }
      return result;
    };

    return UserModel;

  })();

  UserViewModel = function() {
    var self;
    self = this;
    self.userName = ko.observable('walter');
    self.password = ko.observable('flexbenq');
    self.repassword = ko.observable('flexbenq');
    self.validUserName = ko.computed(function() {
      var un;
      un = $.trim(self.userName());
      return un.length >= 6 && un.length <= 25;
    });
    self.validPassword = ko.computed(function() {
      var pw;
      pw = $.trim(self.password());
      return pw.length >= 7 && pw.length <= 25;
    });
    self.validRePassword = ko.computed(function() {
      return $.trim(self.password()) === $.trim(self.repassword());
    });
    self.departments = ko.observableArray([]);
    self.selectedDepartment = ko.observable(null);
    self.superiors = ko.observableArray([]);
    self.selectedSuperior = ko.observable(null);
    self.valid = ko.computed(function() {
      return (self.selectedDepartment() != null) && self.validUserName() && self.validPassword() && self.validRePassword();
    });
    self.submit = function() {
      var data, _ref, _ref1;
      if (self.valid()) {
        data = {
          userName: $.trim(self.userName()),
          password: $.trim(self.password()),
          departmentId: (_ref = self.selectedDepartment()) != null ? _ref["id"] : void 0,
          superiorId: (_ref1 = self.selectedSuperior()) != null ? _ref1["id"] : void 0
        };
        return UserModel.createUser(data, function(response) {
          return console.log(response["data"]);
        });
      } else {
        return alert("creation fail.");
      }
    };
    self.createNewUser = function(userName, password) {};
    return self;
  };

  init = function() {
    var getUsersAndSuperiosByDepartmentId, getUsersByDepartmentId, uservm;
    uservm = new UserViewModel();
    ko.applyBindings(uservm);
    DepartmemtModel.getAllDepartments(function(response) {
      return uservm.departments(response.data);
    });
    getUsersAndSuperiosByDepartmentId = function(departmentId, allUsers, allDepartments) {
      var department, pid, pusers, result, _i, _len;
      result = getUsersByDepartmentId(departmentId, allUsers);
      for (_i = 0, _len = allDepartments.length; _i < _len; _i++) {
        department = allDepartments[_i];
        if (departmentId === department["id"]) {
          pid = department["pid"];
          pusers = getUsersByDepartmentId(pid, allUsers);
          return result.concat(pusers);
        }
      }
    };
    getUsersByDepartmentId = function(departmentId, allUsers) {
      var result, user, _i, _len;
      result = [];
      if (!departmentId) {
        return result;
      }
      for (_i = 0, _len = allUsers.length; _i < _len; _i++) {
        user = allUsers[_i];
        if (departmentId === user["departmentId"]) {
          result.push(user);
        }
      }
      return result;
    };
    return $("#userDepartment").change(function() {
      var departmentId, _ref;
      departmentId = (_ref = uservm.selectedDepartment()) != null ? _ref['id'] : void 0;
      if (departmentId) {
        return UserModel.getAllUsers(function(response) {
          var superiors, users;
          users = response.data;
          superiors = getUsersAndSuperiosByDepartmentId(departmentId, users, uservm.departments());
          return uservm.superiors(superiors);
        });
      } else {
        return uservm.superiors([]);
      }
    });
  };

  init();

}).call(this);
