// Generated by CoffeeScript 1.6.1
(function() {
  var DepartmentViewModel, init, treeList;

  treeList = new TreeList("#departmentTree");

  DepartmentViewModel = function() {
    var self;
    self = this;
    self.departmentName = ko.observable('');
    self.updateDepartmentName = ko.observable('');
    self.validDepartmentName = ko.computed(function() {
      var dname;
      dname = $.trim(self.departmentName());
      return dname.length >= 1 && dname.indexOf(":") === -1;
    });
    self.validUpdateDepartmentName = ko.computed(function() {
      var dname;
      dname = $.trim(self.updateDepartmentName());
      return dname.length >= 1 && dname.indexOf(":") === -1;
    });
    self.updateDepartment = ko.observable(null);
    self.departments = ko.observableArray(null);
    self.selectedParentDepartment = ko.observable(null);
    self.submit = function() {
      var data, _ref;
      if (self.validDepartmentName()) {
        data = {
          departmentName: $.trim(self.departmentName()),
          pid: (_ref = self.selectedParentDepartment()) != null ? _ref["id"] : void 0
        };
        return DepartmemtModel.createNewDepartment(data, function(response) {
          if (response.state === 0) {
            return;
          }
          self.departments.push(response.data);
          return treeList.show(self.departments());
        });
      }
    };
    return self;
  };

  init = function() {
    var cancelUpdateDepartment, departmentvm, findDepartment, findParentDepartment;
    departmentvm = new DepartmentViewModel();
    ko.applyBindings(departmentvm);
    $("#departmentTree").on("update", function(event) {
      var department, departmentId;
      departmentId = event["itemId"];
      department = findDepartment(departmentId);
      departmentvm.updateDepartment(department);
      departmentvm.updateDepartmentName(department['name']);
      return departmentvm.selectedParentDepartment(findParentDepartment(department));
    });
    findDepartment = function(departmentId) {
      var department, departments, _i, _len;
      departments = departmentvm.departments();
      for (_i = 0, _len = departments.length; _i < _len; _i++) {
        department = departments[_i];
        if (department['id'] === departmentId) {
          return department;
        }
      }
    };
    findParentDepartment = function(department) {
      var departments, pid, _i, _len;
      pid = department["pid"];
      if (pid) {
        departments = departmentvm.departments();
        for (_i = 0, _len = departments.length; _i < _len; _i++) {
          department = departments[_i];
          if (department['id'] === pid) {
            return department;
          }
        }
      }
      return null;
    };
    $("#cancelUpdateBtn").click(function() {
      return cancelUpdateDepartment();
    });
    cancelUpdateDepartment = function() {
      treeList.showEditingItem();
      return departmentvm.updateDepartment(null);
    };
    $("#updateBtn").click(function() {
      var data, departmentId, _ref;
      departmentId = treeList.getEditingItemId();
      data = {
        departmentId: departmentId,
        departmentName: departmentvm.updateDepartmentName(),
        pid: (_ref = departmentvm.selectedParentDepartment()) != null ? _ref["id"] : void 0
      };
      return DepartmemtModel.updateDepartment(data, function(response) {
        if (response.state === 0) {
          return;
        }
        cancelUpdateDepartment();
        departmentvm.departments(response["data"]);
        return treeList.show(response["data"]);
      });
    });
    $("#departmentTree").on("delete", function(event) {
      return DepartmemtModel.removeDepartment({
        departmentId: event["itemId"]
      }, function(response) {
        if (response.state === 0) {
          return;
        }
        departmentvm.departments(response.data);
        return treeList.show(response["data"]);
      });
    });
    return DepartmemtModel.getAllDepartments(function(response) {
      if (response.state === 0) {
        return;
      }
      departmentvm.departments(response.data);
      return treeList.show(response["data"]);
    });
  };

  init();

}).call(this);
