// Generated by CoffeeScript 1.6.1
(function() {
  var DepartmemtModel, DepartmentViewModel, TreeList, init;

  DepartmemtModel = (function() {

    function DepartmemtModel() {}

    DepartmemtModel.getAllDepartments = function(callback) {
      return $.get("/admin/alldepartments", function(response) {
        var departments;
        departments = DepartmemtModel.parseDepartments(response.data);
        response['data'] = departments;
        return callback(response);
      }, "json");
    };

    DepartmemtModel.parseDepartments = function(data) {
      var childOfKey, departmentId, key, key2, result, resultObj, value, value2, _ref;
      resultObj = {};
      for (key in data) {
        value = data[key];
        childOfKey = key.split(":");
        departmentId = childOfKey[0];
        if ((_ref = resultObj[departmentId]) == null) {
          resultObj[departmentId] = {
            id: departmentId
          };
        }
        if (childOfKey[1] === "name") {
          resultObj[departmentId]["name"] = value;
        } else if (childOfKey[1] === "pid") {
          resultObj[departmentId]["pid"] = value;
        }
      }
      result = [];
      for (key2 in resultObj) {
        value2 = resultObj[key2];
        result.push(value2);
      }
      return result;
    };

    DepartmemtModel.createNewDepartment = function(data, callback) {
      return $.post("/admin/createDepartment", data, function(response) {
        return callback(response);
      }, "json");
    };

    DepartmemtModel.removeDepartment = function(data, callback) {
      return $.post("/admin/removedepartment", data, function(response) {
        var departments;
        departments = DepartmemtModel.parseDepartments(response.data);
        response.data = departments;
        return callback(response);
      }, "json");
    };

    return DepartmemtModel;

  })();

  DepartmentViewModel = function() {
    var self;
    self = this;
    self.departmentName = ko.observable('');
    self.validDepartmentName = ko.computed(function() {
      var dname;
      dname = $.trim(self.departmentName());
      return dname.length >= 1 && dname.indexOf(":") === -1;
    });
    self.departments = ko.observableArray(null);
    self.selectedParentDepartment = ko.observable(null);
    self.submit = function() {
      var data, _ref;
      if (self.validDepartmentName()) {
        data = {
          departmentName: self.departmentName(),
          pid: (_ref = self.selectedParentDepartment()) != null ? _ref["id"] : void 0
        };
        return DepartmemtModel.createNewDepartment(data, function(response) {
          self.departments.push(response.data);
          return TreeList.showTree("#departmentTree", self.departments());
        });
      }
    };
    return self;
  };

  init = function() {
    var departmentvm;
    departmentvm = new DepartmentViewModel();
    ko.applyBindings(departmentvm);
    $("#departmentTree").on("click", "i.delete", function(event) {
      var departmentId, t;
      t = $(event.target);
      departmentId = t.parent().attr('id');
      return DepartmemtModel.removeDepartment({
        departmentId: departmentId
      }, function(response) {
        departmentvm.departments(response.data);
        return TreeList.showTree("#departmentTree", response.data);
      });
    });
    $("#departmentTree").on("click", "li i.icon-plus", function(event) {
      var t;
      t = $(event.target);
      event.stopImmediatePropagation();
      return t.addClass('icon-minus').removeClass('icon-plus');
    });
    $("#departmentTree").on("click", "li i.icon-minus", function(event) {
      var t;
      t = $(event.target);
      event.stopImmediatePropagation();
      return t.addClass('icon-plus').removeClass('icon-minus');
    });
    return DepartmemtModel.getAllDepartments(function(response) {
      departmentvm.departments(response.data);
      return TreeList.showTree("#departmentTree", departmentvm.departments());
    });
  };

  init();

  TreeList = (function() {

    function TreeList() {}

    TreeList.showTree = function(nodeName, data) {
      this.data = data;
      $(nodeName).empty();
      return this.renderTree(nodeName, this.getDepartTreeData());
    };

    TreeList.renderTree = function(node, data) {
      var linode, newnode, newnode2, value, _i, _len;
      $(node).append("<ul></ul>");
      newnode = "" + node + " ul:first";
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        value = data[_i];
        linode = "<li id='" + value.id + "node'><div id='" + value.id + "'><span class='nodename'>" + value.label + "</span><i class='delete icon-remove' /></div></li>";
        if (value.children) {
          linode = "<li id='" + value.id + "node'><div id='" + value.id + "'><i class='icon-minus' /><span class='nodename'>" + value.label + "</span><i class='delete icon-remove' /></div></li>";
        }
        $(newnode).append(linode);
        newnode2 = "" + newnode + " #" + value.id + "node";
        if (value.children) {
          this.renderTree(newnode2, value.children);
        }
      }
      return null;
    };

    TreeList.getDepartTreeData = function() {
      var departs, findChidren, node, rootnode, treeData, value, _i, _j, _len, _len1;
      departs = this.data;
      treeData = [];
      for (_i = 0, _len = departs.length; _i < _len; _i++) {
        value = departs[_i];
        rootnode = {
          label: value.name,
          id: value.id
        };
        if (!value.pid) {
          treeData.push(rootnode);
        }
      }
      findChidren = function(node, departs) {
        var childNode, _j, _len1;
        for (_j = 0, _len1 = departs.length; _j < _len1; _j++) {
          value = departs[_j];
          if (value.pid === node.id) {
            if (!node.children) {
              node.children = [];
            }
            childNode = {
              label: value.name,
              id: value.id
            };
            node.children.push(childNode);
            findChidren(childNode, departs);
          }
        }
        return "";
      };
      for (_j = 0, _len1 = treeData.length; _j < _len1; _j++) {
        node = treeData[_j];
        findChidren(node, departs);
      }
      return treeData;
    };

    return TreeList;

  })();

}).call(this);
