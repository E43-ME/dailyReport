// Generated by CoffeeScript 1.6.1
(function() {
  var TreeList;

  TreeList = (function() {

    function TreeList(containerNode, dataSource) {
      var treeNodes,
        _this = this;
      this.containerNode = containerNode;
      this.dataSource = dataSource != null ? dataSource : null;
      this.editingItem = null;
      $(this.containerNode).addClass("treeList");
      $(this.containerNode).on("mouseenter", "li div", function(event) {
        if ($(this) !== this.editingItem) {
          return $(this).addClass('treeListItemOver');
        }
      });
      $(this.containerNode).on("mouseleave", "li div", function(event) {
        if ($(this) !== this.editingItem) {
          return $(this).removeClass('treeListItemOver');
        }
      });
      $(this.containerNode).on("click", "span.update", function(event) {
        var t, updateEvent;
        t = $(event.target);
        t.parent().removeClass('treeListItemOver').addClass('treeListItemSelected');
        t.hide();
        if (_this.editingItem) {
          _this.editingItem.parent().removeClass('treeListItemSelected');
          _this.editingItem.show();
        }
        _this.editingItem = t;
        updateEvent = jQuery.Event("update");
        updateEvent["itemId"] = t.parent().attr('id');
        return $(_this.containerNode).trigger(updateEvent);
      });
      $(this.containerNode).on("click", "span.delete", function(event) {
        var deleteEvent, t;
        t = $(event.target);
        deleteEvent = jQuery.Event("delete");
        deleteEvent["itemId"] = t.parent().attr('id');
        return $(_this.containerNode).trigger(deleteEvent);
      });
      treeNodes = {};
      $(this.containerNode).on("click", "li i.icon-plus-sign", function(event) {
        var name;
        event.stopImmediatePropagation();
        $(this).addClass('icon-minus-sign').removeClass('icon-plus-sign');
        name = $(this).parent().parent().attr("id");
        $("#" + name).append(treeNodes[name]);
        return delete treeNodes[name];
      });
      $(this.containerNode).on("click", "li i.icon-minus-sign", function(event) {
        var name;
        event.stopImmediatePropagation();
        $(this).addClass('icon-plus-sign').removeClass('icon-minus-sign');
        name = $(this).parent().parent().attr("id");
        return treeNodes[name] = $(this).parent().next().detach();
      });
    }

    TreeList.prototype.show = function(dataSource) {
      this.dataSource = dataSource;
      $(this.containerNode).empty();
      return this.renderTree(this.containerNode, this.getDepartTreeData());
    };

    TreeList.prototype.showEditingItem = function() {
      if (!this.editingItem) {
        return;
      }
      this.editingItem.parent().removeClass('treeListItemSelected');
      this.editingItem.show();
      return this.editingItem = null;
    };

    TreeList.prototype.getEditingItemId = function() {
      if (!this.editingItem) {
        return null;
      }
      return this.editingItem.parent().attr('id');
    };

    TreeList.prototype.renderTree = function(node, data) {
      var linode, newnode, newnode2, value, _i, _len;
      $(node).append("<ul></ul>");
      newnode = "" + node + " ul:first";
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        value = data[_i];
        linode = "<li id='" + value.id + "node'><div id='" + value.id + "'><span class='nodename'>" + value.label + "</span><span class='delete btn btn-danger'>删除</span><span class='update btn btn-warning'>编辑</span></div></li>";
        if (value.children) {
          linode = "<li id='" + value.id + "node'><div id='" + value.id + "'><i class='icon-minus-sign' /><span class='nodename'>" + value.label + "</span><span class='delete btn btn-danger'>删除</span><span class='update btn btn-warning'>编辑</span></div></li>";
        }
        $(newnode).append(linode);
        newnode2 = "" + newnode + " #" + value.id + "node";
        if (value.children) {
          this.renderTree(newnode2, value.children);
        }
      }
      return null;
    };

    TreeList.prototype.getDepartTreeData = function() {
      var departs, findChidren, node, rootnode, treeData, value, _i, _j, _len, _len1;
      departs = this.dataSource;
      treeData = [];
      for (_i = 0, _len = departs.length; _i < _len; _i++) {
        value = departs[_i];
        rootnode = {
          label: value.name,
          id: value.id
        };
        if (!value.pid) {
          treeData.push(rootnode);
        }
      }
      findChidren = function(node, departs) {
        var childNode, _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = departs.length; _j < _len1; _j++) {
          value = departs[_j];
          if (value.pid === node.id) {
            if (!node.children) {
              node.children = [];
            }
            childNode = {
              label: value.name,
              id: value.id
            };
            node.children.push(childNode);
            _results.push(findChidren(childNode, departs));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      for (_j = 0, _len1 = treeData.length; _j < _len1; _j++) {
        node = treeData[_j];
        findChidren(node, departs);
      }
      return treeData;
    };

    return TreeList;

  })();

  window.TreeList = TreeList;

}).call(this);
