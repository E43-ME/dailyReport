// Generated by CoffeeScript 1.6.1
(function() {
  var Response, authenticateUser, check, crypto, reportModel, sanitize, showPage, userModel;

  crypto = require('crypto');

  check = require('validator').check;

  sanitize = require('validator').sanitize;

  reportModel = require('../models/reportModel');

  userModel = require('../models/usersModel');

  Response = require('../vo/Response').Response;

  authenticateUser = function(req, res) {
    var result;
    result = true;
    if (!req.session.userId) {
      res.redirect('/login');
      result = false;
    }
    return result;
  };

  exports.index = function(req, res) {
    if (!authenticateUser(req, res)) {
      return;
    }
    return res.redirect("/show");
  };

  exports.writeIndex = function(req, res) {
    var userId;
    if (!authenticateUser(req, res)) {
      return;
    }
    userId = req.session.userId;
    return showPage(res, userId, "write");
  };

  exports.write = function(req, res) {
    var content, date, dateStr, months, userId, year, _ref;
    if (!authenticateUser(req, res)) {
      return;
    }
    userId = req.session.userId;
    console.log("write userId:" + userId);
    dateStr = sanitize(req.body.date).trim();
    content = sanitize(req.body.content).trim();
    try {
      check(dateStr).notEmpty();
      check(content).notEmpty();
      _ref = dateStr.split("-"), year = _ref[0], months = _ref[1], date = _ref[2];
      check(year).notNull().isNumeric().len(4, 4);
      check(months).notNull().isNumeric().len(1, 2);
      check(date).notNull().isNumeric().len(1, 2);
      return reportModel.createReport(userId, content, dateStr, function(response) {
        return res.send(response);
      });
    } catch (error) {
      return res.send(new Response(0, "日期格式不正确或者内容为空"));
    }
  };

  exports.showIndex = function(req, res) {
    var userId;
    if (!authenticateUser(req, res)) {
      return;
    }
    userId = req.session.userId;
    return showPage(res, userId, "show");
  };

  showPage = function(res, userId, pageTitle) {
    return userModel.hasSubordinate(userId, function(result) {
      var data;
      data = {
        hasSubordinate: result
      };
      return res.render(pageTitle, data);
    });
  };

  exports.showsubordinateIndex = function(req, res) {
    var userId;
    if (!authenticateUser(req, res)) {
      return;
    }
    userId = req.session.userId;
    return userModel.hasSubordinate(userId, function(result) {
      if (result) {
        return res.render("showsubordinate");
      } else {
        return res.send("您目前没有下属,不需要访问该页面！");
      }
    });
  };

  exports.getReports = function(req, res) {
    var numOfPage, page, userId;
    if (!authenticateUser(req, res)) {
      return;
    }
    page = sanitize(req.body.page).trim();
    userId = sanitize(req.body.userId).trim();
    if (!userId) {
      userId = req.session.userId;
    }
    numOfPage = sanitize(req.body.numOfPage).trim();
    try {
      check(page).isNumeric().min(1);
      check(page).isNumeric().min(1);
      return reportModel.getReports(userId, page, numOfPage, function(response) {
        return res.send(response);
      });
    } catch (error) {
      return res.send(new Response(0, "页数和每页显示条数为非负数"));
    }
  };

  exports.getReportNum = function(req, res) {
    var userId;
    if (!authenticateUser(req, res)) {
      return;
    }
    userId = sanitize(req.body.userId).trim();
    if (!userId) {
      userId = req.session.userId;
    }
    return reportModel.getReportNum(userId, function(response) {
      return res.send(response);
    });
  };

  exports["delete"] = function(req, res) {
    var reportId, userId;
    if (!authenticateUser(req, res)) {
      return;
    }
    userId = req.session.userId;
    reportId = req.body.reportId;
    return reportModel.deleteReport(userId, reportId, function(response) {
      return res.send(response);
    });
  };

  exports.getSubordinateUserAndDepartment = function(req, res) {
    var userId;
    if (!authenticateUser(req, res)) {
      return;
    }
    userId = req.session.userId;
    return reportModel.getSubordinateUserAndDepartment(userId, function(response) {
      return res.send(response);
    });
  };

}).call(this);
